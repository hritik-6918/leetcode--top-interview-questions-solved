vector<vector<string>> res;
    bool ispalindrome(string &s) 
    {
        int l=0, h=s.size()-1;
        while(l<h)
        {
            if(s[l]!=s[h])
            return false;
            l++;
            h--;
        }
        return true;
    }

    void find(int i, string &s, string temp, vector<string> valid)
    {
        if(i==s.size())
        {
            if(temp.empty())
                res.push_back(valid);
            return;
        } 

        temp += s[i];
        find(i+1, s, temp, valid);
        if(ispalindrome(temp))
        {
            valid.push_back(temp);
            find(i+1, s, "", valid);
        }
        
    }

    vector<vector<string>> partition(string s) 
    {
        vector<string> valid;
        find(0, s, "", valid);
        return res;   
    }
/* vector<vector<string>>partition(string s){
    vector<vector<string>>res;
    vector<string>path;

    helper(0,s,path,res);
    return res;
}
void helper(int index,string s,vector<string>&path,vector<vector<string>>&res){
    if(index==s.size()){
        res.push_back(path);
        return;
        for(int i=index;i<s.size();i++){
            if(isPalindrome(s,index,i)){
                path.push_back(s.substr(index,i-index+1));
                helper(i+1,s,path,res);
                path.pop_back();
            }
        }
    }

    bool isPalindrome(string s,int start,int end){
        while(start<=end){
            if(s[start++]!=s[end--])
            return false;
        }
        return true;
    }
}
*/
};